@startuml
!include ./common/C4_Context.puml
!include ./common/C4_Container.puml

title Уровень контейнеров

Person_Ext(user, "User system")

Container_Ext(ssd_storage, "SSD Storage")

AddRelTag("read", $lineColor="#00e600", $legendText="Write")
AddRelTag("write", $lineColor="#ff3333", $legendText="Read")
AddRelTag("read_write", $lineColor="black", $legendText="Read/Write")
AddRelTag("log", $lineColor="#ffa500", $legendText="Logs")
AddRelTag("metric", $lineColor="#30d5c8", $legendText="Metrics")

System_Boundary(c1, "Smart Home") {
    ContainerQueue_Ext(kafka, "Databus", "Kafka Cluster", "Store and transport messages to services")

    Boundary(prometheus_space, "Prometheus Space") {
        Container(prometheus, "Prometheus", "Java")
    }

    Boundary(elk_space, "ELK Space") {
        Container(elk, "ELK", "ELK stack to support log storing and searching")
    }

    Boundary(Nginx_space, "API Gateway") {
        Container(Nginx, "API Gateway", "Nginx")
    }

    Boundary(common_database_space, "Common Database Space") {
        ContainerDb(common_db, "Common Database", "Postgress")
    }

    Boundary(telemetry_space, "Telemetry data controller") {
        Container(telemetry_api_service, "Api Telemetry Service", "Java")

        Rel(telemetry_api_service, elk, "User service logs", $tags="write")
        Rel(telemetry_api_service, common_db, "User data", $tags="read_write")
        Rel(telemetry_api_service, prometheus, "Metriucs", $tags="metric")
    }

    Boundary(user_space, "User data controller") {
        Container(user_api_service, "Api User Service", "Java")

        Rel(user_api_service, elk, "User service logs", $tags="write")
        Rel(user_api_service, common_db, "User data", $tags="read_write")
        Rel(user_api_service, prometheus, "Metriucs", $tags="metric")
    }

    Boundary(device_registration_space, "Device Registration controller") {
        Container(device_registration_service, "Api Device Registration Service", "Java")

        Rel(device_registration_service, common_db, "Devices data", $tags="read_write")
        Rel(device_registration_service, elk, "User service logs", $tags="write")
        Rel(device_registration_service, prometheus, "Metriucs", $tags="metric")
    }

    Boundary(input_data_handling_space, "Device Input Data handler controller") {
        Container(input_adapter_service, "Input device data handler", "Java", "Validate and transport data to storage")

        Rel(input_adapter_service, kafka, "Device Message", $tags="write")
        Rel(input_adapter_service, elk, "User service logs", $tags="write")
        Rel(input_adapter_service, common_db, "Input device Message Data", $tags="read_write")
        Rel(input_adapter_service, prometheus, "Metriucs", $tags="metric")

        Rel(input_adapter_service, prometheus, "Metriucs", $tags="metric")
    }

    Boundary(event_handling_space, "Event handler Space") {
        Boundary(smart_home_monolit_space, "Smart Home Monolite Space"){
            Container(monolite_service, "Monolit", "Java")

            Rel(monolite_service, common_db, "Device Message Data", $tags="read_write")

            Rel(monolite_service, kafka, "Consume and publish messsage", $tags="read_write")
        }
    }
}

Rel(user, Nginx, "API Gateway", $tags="read_write")
Rel(Nginx, user_api_service, "Requests", $tags="read_write")
Rel(Nginx, input_adapter_service, "Requests", $tags="read_write")
Rel(Nginx, elk, "Requests", $tags="write")
Rel(elk, ssd_storage, "Store data", $tags="read_write")
Rel(kafka, ssd_storage, "Store data", $tags="read_write")

Rel(kafka, prometheus, "Metrics", $tags="write")
Rel(elk, prometheus, "Metrics", $tags="write")
Rel(ssd_storage, prometheus, "Metrics", $tags="write")

Rel(Nginx, prometheus, "Access to metrics", $tags="read_write")
Rel(Nginx, elk, "Access to logs", $tags="read_write")

SHOW_LEGEND()

@enduml